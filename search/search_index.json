{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Clite  <p>A zero-dependency package for building CLIs. Based on type hints.</p> <p>The name is inspired by the SQLite</p> <p>Documentation: https://axemanofic.github.io/clite</p> <p>Source Code: https://github.com/axemanofic/clite</p> <p>Warning</p> <p>This package is currently under development.</p>"},{"location":"#installation","title":"Installation","text":"pipuvpoetry <pre><code>pip install clite\n</code></pre> <pre><code>uv add clite\n</code></pre> <pre><code>poetry add clite\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#example","title":"Example","text":"<pre><code>from clite import Clite\n\napp = Clite(\n    name=\"myapp\",\n    description=\"A small package for creating command line interfaces\",\n)\n\n@app.command()\ndef hello(name: str = \"world\"):\n    print(f\"Hello, {name}!\")\n\nif __name__ == \"__main__\":\n    app()\n</code></pre>"},{"location":"#run-it","title":"Run it","text":"<pre><code>python main.py hello Alice\n</code></pre> <p>Output:</p> <pre><code>Hello, Alice!\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"references/","title":"References","text":""},{"location":"references/#clite","title":"clite","text":""},{"location":"references/#clite.Clite","title":"Clite","text":"<pre><code>Clite(\n    name: typing.Optional[str] = None,\n    *,\n    description: typing.Optional[str] = None\n)\n</code></pre> <p>Clite class.</p> <p>Class containing all the commands</p>"},{"location":"references/#clite.Clite.name","title":"name","text":"<pre><code>name = (\n    \"clite\"\n    if clite.main.Clite(name) is None\n    else clite.main.Clite(name).lower()\n)\n</code></pre>"},{"location":"references/#clite.Clite.description","title":"description","text":"<pre><code>description = clite.main.Clite(description)\n</code></pre>"},{"location":"references/#clite.Clite.commands","title":"commands","text":"<pre><code>commands: dict[str, clite.main.Command] = {}\n</code></pre>"},{"location":"references/#clite.Clite.command","title":"command","text":"<pre><code>command(\n    name: typing.Optional[str] = None,\n    *,\n    description: typing.Optional[str] = None\n) -&gt; Callable[[Callable[P, T]], Callable[P, None]]\n</code></pre> <p>Return wrapper function.</p> <p>Parameters:</p> Name Type Description Default <code>typing.Optional[str]</code> <p>name of the command</p> <code>None</code> <code>typing.Optional[str]</code> <p>description of the command.</p> <code>None</code> <p>Returns:</p> Type Description <code>typing.Callable[[typing.Callable[clite.main.P, clite.main.T]], typing.Callable[clite.main.P, None]]</code> <p>wrapped function</p>"},{"location":"references/#clite.Clite.command(name)","title":"<code>name</code>","text":""},{"location":"references/#clite.Clite.command(description)","title":"<code>description</code>","text":""},{"location":"references/#clite.CliRunner","title":"CliRunner","text":"<p>CliRunner class for testing.</p>"},{"location":"references/#clite.CliRunner.invoke","title":"invoke","text":"<pre><code>invoke(\n    clite_instance: clite.Clite, argv: list[str]\n) -&gt; Result\n</code></pre> <p>Invoke the command.</p> <p>Parameters:</p> Name Type Description Default <code>clite.Clite</code> <p>clite instance</p> required <code>list[str]</code> <p>list of arguments</p> required <p>Returns:</p> Type Description <code>clite.testing.Result</code> <p>exit code</p>"},{"location":"references/#clite.CliRunner.invoke(clite_instance)","title":"<code>clite_instance</code>","text":""},{"location":"references/#clite.CliRunner.invoke(argv)","title":"<code>argv</code>","text":""},{"location":"references/#clite.Result","title":"Result","text":"<pre><code>Result(exit_code: int = 0)\n</code></pre> <p>Result class for testing.</p>"},{"location":"references/#clite.Result.exit_code","title":"exit_code","text":"<pre><code>exit_code = clite.testing.Result(exit_code)\n</code></pre>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#02x","title":"0.2.x","text":"<p>Create a library for creating command line interfaces</p> <ul> <li> Make it possible to create a CLI application</li> <li> Make it possible to create a command via a decorator</li> <li> Make it possible to create command arguments</li> <li> Make it possible to create optional command arguments</li> </ul>"},{"location":"roadmap/#03x","title":"0.3.x","text":"<p>Create api for creating subcommands</p> <ul> <li> Make it possible to create subcommands</li> </ul>"},{"location":"roadmap/#04x","title":"0.4.x","text":"<p>Echo message in the console</p> <ul> <li> Make it possible to echo a message in the console</li> </ul>"}]}